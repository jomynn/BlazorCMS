@page "/login"
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http // ✅ Inject HttpClient

<h3 class="text-center mt-4">Admin Login</h3>

@if (!IsAuthenticated)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-4">
                <div class="card shadow p-4">
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" @bind="Email" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" @bind="Password" required>
                        </div>
                        <button class="btn btn-primary w-100" @onclick="AdminLogin">Login</button>
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <p class="text-danger mt-3">@ErrorMessage</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <p>✅ You are logged in. Redirecting...</p>
    </div>
}

@code {
    private string Email = "";
    private string Password = "";
    private bool IsAuthenticated = false;
    private string ErrorMessage = "";
    private bool _rendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_rendered)
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            IsAuthenticated = !string.IsNullOrEmpty(token);
            _rendered = true; // ✅ Prevent unnecessary updates
            if (IsAuthenticated)
            {
                Navigation.NavigateTo("/", forceLoad: true); // ✅ Redirect if already logged in
            }
            else
            {
                StateHasChanged(); // ✅ Fix UI stuck issue
            }
        }
    }

    private async Task AdminLogin()
    {
        ErrorMessage = "";
        var loginData = new { Email, Password };

        try
        {
            var response = await Http.PostAsJsonAsync("/api/auth/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);

                ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationStateChanged();
                IsAuthenticated = true;

                // ✅ Ensure State Updates Before Navigation
                StateHasChanged();
                await Task.Delay(200);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                ErrorMessage = "❌ Invalid login credentials. Please try again.";
                StateHasChanged(); // ✅ Update UI to show error message
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "❌ An error occurred during login.";
            Console.WriteLine($"Login Error: {ex.Message}");
        }
    }
}
